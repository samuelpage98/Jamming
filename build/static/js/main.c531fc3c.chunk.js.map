{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/Loader/Loader.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","search","bind","handleTermChange","handlePointerDown","handleBlur","state","filler","this","onSearch","term","event","setState","target","value","className","placeholder","onChange","onPointerDown","onBlur","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","handleClick","onNameChange","isLoading","onSave","defaultValue","playlistName","playlistTracks","accessToken","undefined","expiresIn","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","playlistId","method","body","JSON","stringify","uris","ShowDetail","style","App","updatePlaylistName","loadingStyle","visibility","find","savedTrack","push","index","indexOf","splice","TrackURIs","trackURI","searchTerm","Loader","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c531fc3c.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handlePointerDown = this.handlePointerDown.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.state = {filler: 'Enter A Song, Album, or Artist'}\n    }\n\n    search() {\n        this.props.onSearch(this.state.term)\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value})\n    }\n\n    handlePointerDown() {\n        this.setState({filler: ''})\n    }\n\n    handleBlur() {\n        this.setState({filler: 'Enter A Song, Album, or Artist'})\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder={this.state.filler} onChange={this.handleTermChange} onPointerDown={this.handlePointerDown} onBlur={this.handleBlur}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css'\n\nexport class Track extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        if (this.props.isRemoval){\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track)\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track)\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './TrackList.css'\nimport { Track } from '../Track/Track'\n\nexport class TrackList extends React.Component {\n    render() {\n        if (this.props.tracks && typeof this.props.tracks !== 'number'){\n          return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => {\n                    return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>\n                })}\n            </div>\n        )\n        } else{\n            return null\n        }\n        \n    }\n}","import React from 'react';\nimport './SearchResults.css'\nimport { TrackList } from '../TrackList/TrackList'\n\nexport class SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Playlist.css'\nimport { TrackList } from '../TrackList/TrackList'\n\nexport class Playlist extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value)\n    }\n\n    handleClick() {\n        this.props.isLoading()\n        this.props.onSave()\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue= {this.props.playlistName} onChange={this.handleNameChange} />\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n                <button className=\"Playlist-save\" onClick={this.handleClick}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}","let accessToken = undefined;\nlet expiresIn = undefined;\n\nconst clientId = 'b7215b395983485481ca6756db692e65';\n//const redirectUri = 'http://localhost:3000/';\nconst redirectUri = \"http://jammm1ng.surge.sh/\";\n\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken\n        } \n        const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n        const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        if (urlAccessToken && urlExpiresIn) {\n            accessToken = urlAccessToken[1];\n            expiresIn = urlExpiresIn[1];\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public%20user-read-private&redirect_uri=${redirectUri}`\n        }   \n    },\n\n    async search(term) {\n        return fetch(\n            `https://api.spotify.com/v1/search?type=track&q=${term}`,\n            {headers: { \n              Authorization: 'Bearer ' + accessToken,\n            }}\n        ) \n        .then(response => {return response.json()})\n        .then(jsonResponse => {\n            if (!jsonResponse.tracks) return [];\n            return jsonResponse.tracks.items.map(track => {\n                return {\n                 id: track.id,\n                 name: track.name,\n                 artist: track.artists[0].name,\n                 album: track.album.name,\n                 uri: track.uri \n                }   \n            })\n            \n        })\n    },\n\n    async savePlaylist(playlistName, trackUris) {\n        if (!playlistName || !trackUris || trackUris.length === 0) return;\n        let userId = undefined;\n        let playlistId = undefined;\n        return fetch(\n            'https://api.spotify.com/v1/me',\n            {headers: {Authorization: `Bearer ${accessToken}`}}\n        )\n        .then(response => {return response.json()})\n        .then(jsonResponse => {return userId = jsonResponse.id})\n        .then(() => {\n            return fetch(\n                `https://api.spotify.com/v1/users/${userId}/playlists`,\n                {\n                    method: 'POST',\n                    headers: { Authorization: 'Bearer ' + accessToken},\n                    body: JSON.stringify({\n                        name: playlistName\n                    })\n                }\n            )\n        })\n        .then(response => {return response.json()})\n        .then(jsonResponse => {return playlistId = jsonResponse.id})\n        .then(() => {\n            return fetch(\n                `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n                {\n                    method: 'POST',\n                    headers: { Authorization: 'Bearer ' + accessToken},\n                    body: JSON.stringify({\n                        uris: trackUris\n                    })\n                }\n            )\n        })\n    }\n};\n\nexport default Spotify;","import React from 'react';\n\nfunction ShowDetail(props) {\n  return (\n      <div className='loadingContainer' style={props.isLoading}>\n          <div className='center'>\n              <i className=\"fa fa-cog fa-spin\" />\n          </div>\n            <p className='loaderText'>Playlist is being saved.</p>\n      </div>\n   \n  );\n}\n\nexport default ShowDetail;\n","import React from 'react';\nimport './App.css';\nimport SearchBar  from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport Loader from '../Loader/Loader';\n\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n\n    this.state = {searchResults: [],\n    playlistName: 'Enter Playlist Name',\n    playlistTracks: [],\n    loadingStyle: {visibility: 'hidden'}\n  }\n  }\n\n  componentWillMount() {\n    Spotify.getAccessToken()\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } \n    this.state.playlistTracks.push(track)\n    this.setState({playlistTracks: this.state.playlistTracks})\n  }\n\n  removeTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      let index = this.state.playlistTracks.indexOf(track);\n      this.state.playlistTracks.splice(index, 1);\n      this.setState({playlistTracks: this.state.playlistTracks})\n    } \n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist() {\n    const TrackURIs = this.state.playlistTracks.map(trackURI => {\n      return trackURI.uri;\n    })\n    // Spotify.getAccessToken()\n    Spotify.savePlaylist(this.state.playlistName, TrackURIs)\n  }\n\n  search(searchTerm) {\n    // Spotify.getAccessToken()\n    Spotify.search(searchTerm).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  isLoading() {\n    this.setState({loadingStyle: {visibility: 'visible'}})\n    setTimeout(() => {\n      this.setState({loadingStyle: {visibility: 'hidden'}})}, 1500\n    )\n  }\n  \n  render() {\n    \n      \n      /*if (this.state.loading)*/ return(\n         \n         <div>\n            <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n            <div className=\"App\">\n              <SearchBar onSearch={this.search}/>\n              <Loader isLoading={this.state.loadingStyle}/>\n              <div className=\"App-playlist\">\n                <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} /> \n                <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} isLoading={this.isLoading}/>\n              </div>\n            </div>\n          </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}